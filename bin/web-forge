#!/usr/bin/env node
const createTempExtension = require('./handleExtensionFolder.js');

class Webforge {
    run(browser, path, args) {
        const filterValues = ValidateValues(browser, path, args);
        if (filterValues.result) {
            createTempExtension(path);
        } else {
            console.error(filterValues.error);
        }
    }
}


function ValidateValues(browser, path, args = "") {
    const filterValues = {
        result: true,
        error: 'Default',
        launchArgs: ''
    };

    // Checks browser
    switch (browser) {
        case 'firefox':
        case 'ff':

            break;
        case 'chrome':
        case 'ch':
            filterValues.launchArgs = `start chrome --user-data-dir=${cleanUserDir} --load-extension=${tempExtLocation} ${args}`;
            break;
        case 'edge':
        case 'msedge':

            break;
        case 'brave':
        case 'br':

            break;
        default:
            filterValues.result = false;
            filterValues.error = `Browser was unknown. Either it was wrong syntax or unknown browser. ${browser}`;
            return filterValues;
    }

    return filterValues;
}

function validateBrowser(browser) {
    const browserMappings = [
        ['firefox', 'ff',],
        ['chrome', 'ch'],
        ['edge', 'msedge'],
        ['brave', 'br']
    ];

    for (const mapping of browserMappings) {
        if (mapping.includes(browser)) {
            return mapping[0];
        }
    }

    return false;
}


const [, , method, browser , path, ...optionalArgs] = process.argv;

if (method !== undefined) {
    switch (method) {
        case "-b":
            // In the workings
            break;

        case "-r":
            if (validateBrowser(browser) !== false) {
                const webforge = new Webforge();
                webforge.run(browser, path, optionalArgs);
            } else {
                console.error(`Unknown browser: ${browser}`);
            }
            break;

        default:
            console.error(`Unknown method: ${method}`);
            break;
    }
} else {
    console.log('Usage: web-forge <-b|-r> <path> <optional arguments>');
}