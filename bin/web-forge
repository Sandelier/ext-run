#!/usr/bin/env node

const createTempExtension = require('./handleExtensionFolder.js');
const { createServer } = require('./server.js');
const { removeStaleTempFolders } = require('./removeStaleTemps.js');
const pathLib = require('path');
const fs = require('fs');
const fspr = require('fs').promises;
const { v4: uuidv4 } = require('uuid');
const { spawn } = require('child_process');
const { program } = require('commander');
const WebSocket = require('ws');

const tempDirName = `temp_${uuidv4()}`;
const parentDir = pathLib.dirname(__dirname);
const tempDirPath = pathLib.join(parentDir, 'temp', tempDirName);

let browserProcesses = [];

async function Webforge(browser, path, args) {
    path = path || process.cwd()
    try {
        await checkPortsAndCreate();
        console.log(`Listening on port ${serverPort.port}`);
        if (server) {
            // Makes the temp/temp_uuid directory here.
            await fspr.mkdir(tempDirPath, {
                recursive: true
            });
            await createTempExtension(path, tempDirPath, serverPort.port);
            server = createServer(path, tempDirPath, server);

            const browserPids = [];
            // Starts up browsers with arguments.
            const browserPromises = browser.map(async (browserName) => {
                const browserPath = getBrowserPath(browserName);
                if (browserPath) {
                    const launchOptions = [
                        `--user-data-dir=${pathLib.join(tempDirPath, 'userFolder', browserName)}`,
                        `--load-extension=${pathLib.join(tempDirPath, 'extension')}`,
                        '--no-first-run',
                        ...(args ? args.split(" ") : [])
                    ];

                    const browserProcess = spawn(browserPath, launchOptions);
                    browserProcesses.push(browserProcess);
                    browserPids.push(browserProcess.pid);

                    return new Promise((resolve) => {
                        browserProcess.on('close', (code) => {
                            browserProcesses = browserProcesses.filter(
                                (process) => process !== browserProcess
                            );

                            if (browserProcesses.length === 0) {
                                resolve();
                            }
                        });
                    });
                } else {
                    console.log(`Unable to find a valid path for ${browserName}`);
                }
            });
            // Pid used so we can remove stale temp folders.
            await fspr.writeFile(pathLib.join(tempDirPath, "process"), browserPids.toString());

            // Waiting for all promises because if we dont use promises the finally block will be executed immediately because everything is asyncronous.
            await Promise.all(browserPromises);
        }
    } catch (error) {
        console.log(error);
    } finally {
        await cleanUp();
    }
}

// Loop to try to get available websocket.
// I would have placed this in server.js but decided its best to place in here because handleExtensionFolder needs the port of the server.
let server;
const serverPort = {
    port: 46532
};

async function checkPortsAndCreate() {
    server = new WebSocket.Server({
        port: serverPort.port
    });

    server.on('error', (error) => {
        if (error.code === 'EADDRINUSE') {
            serverPort.port += 1;
            if (serverPort.port < 46632) {
                checkPortsAndCreate();
            } else {
                console.log(`All ports in the range are in use.`);
            }
        }
    });
}


// Returns an default path for browsers
function getBrowserPath(browser) {

    // On this remember the map has to correspond to correct name that validateBrowser returns. 
    // Because this fails in example if you switch up validateBrowser to return "edge" instead of "msedge"
    const browserDefaultPathMap = {
        "chrome": ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"],
        "msedge": ["C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe", "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe"],
        "brave": ["C:\\Program Files\\BraveSoftware\\Brave-Browser\\Application\\brave.exe", "C:\\Program Files (x86)\\BraveSoftware\\Brave-Browser\\Application\\brave.exe"]
    };

    const paths = browserDefaultPathMap[browser.toLowerCase()] || [];
    for (const path of paths) {
        if (fs.existsSync(path)) {
            return path;
        }
    }

    return null;
}

async function cleanUp() {
    for (const browser of browserProcesses) {
        browser.kill();
    }
    if (server) {
        server.close();
    }
    await removeStaleTempFolders(tempDirPath);
    process.exit(0);
}

process.on('SIGINT', async () => {
    if (programLock) {
        try {
            await cleanUp();
        } catch (error) {
            console.error('Error during cleanup:', error);
            process.exit(1);
        }
    } else {
        process.exit(0);
    }
});

// Returns valid browsers based on browser input and browsermapping.
function validateBrowser(browser) {
    const browserMappings = [
        ['chrome', 'ch'],
        ['msedge', 'edge'],
        ['brave', 'br']
    ];

    const uniqueBrowsers = new Set();
    const browserNames = browser.split(',');

    for (const inputBrowser of browserNames) {
        let foundMapping = false;
        for (const mapping of browserMappings) {
            if (mapping.includes(inputBrowser)) {
                uniqueBrowsers.add(mapping[0]);
                foundMapping = true;
                break;
            }
        }
        if (!foundMapping) {
            console.error(`Received an unknown browser ${inputBrowser}`);
        }
    }

    if (uniqueBrowsers.size === 0) {
        console.error('No valid browsers found. Exiting...');
        return false;
    }

    return Array.from(uniqueBrowsers);
}


program
    .option('-b, --browser <browser>', 'Launch specific browser. Accepts chrome/ch/edge/msedge/brave/br. You can also put browsers into string to launch multiple -b "chrome,edge".')
    .option('-p, --path <path>', 'Path to extension. Defaults to current folder if no path is given.')
    .option('-args, --arguments <args>', 'Extra arguments as a string')
    .option('-help, --help', 'Shows available arguments.')
    .parse(process.argv);

program.on('--help', () => {
    console.log('')
    console.log('Examples:');
    console.log('   web-forge -b chrome -args "--kiosk"');
    console.log('   web-forge -b edge -p "path/to/extension"');
    console.log('');
    process.exit(0);
});

program.parse(process.argv);

if (program.opts().help) {
    program.outputHelp();
    process.exit(0);
}

if (!program.opts().browser) {
    console.log('')
    console.error('Error: Please provide the -b option with a valid browser.');
    console.log('')
    program.outputHelp();
    process.exit(1);
}

const validBrowser = validateBrowser(program.opts().browser);

if (!validBrowser) {
    console.log('')
    console.error('Error: Invalid browser specified.');
    console.log('')
    program.outputHelp();
    process.exit(1);
}

programLock = true;
Webforge(validBrowser, program.opts().path, program.opts().arguments);