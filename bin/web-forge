#!/usr/bin/env node

const createTempExtension = require('./handleExtensionFolder.js');
const { createServer, server } = require('./server.js');
const pathLib = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
const { spawn } = require('child_process');

const tempDirName = `temp_${uuidv4()}`;
const tempDirPath = pathLib.join(__dirname, tempDirName);

let browserProcess = null;

async function Webforge(browser, path, args) {
    const browserPath = getBrowserPath(browser);
    if (browserPath != null) {
        path = path || process.cwd()
        try {
            await createTempExtension(path, tempDirPath);
            createServer(path, tempDirPath);

            const launchOptions = [
                `--user-data-dir=${pathLib.join(tempDirPath, 'userFolder')}`,
                `--load-extension=${pathLib.join(tempDirPath, 'extension')}`,
                '--no-first-run',
                ...args
            ];

            browserProcess = spawn(browserPath, launchOptions);

            browserProcess.on('close', (code) => {
              cleanUp(tempDirPath);
            });

        } catch (error) {
            console.log(error);
        }
    } else {
        console.error(`Was unable to find any valid browser paths for ${browser}`);
    }
}

// Returns an default path for browsers
function getBrowserPath(browser) {
    const browserDefaultPathMap = {
      "chrome": ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"],
      "msedge": ["C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe", "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe"],
      "brave": ["C:\\Program Files\\BraveSoftware\\Brave-Browser\\Application\\brave.exe", "C:\\Program Files (x86)\\BraveSoftware\\Brave-Browser\\Application\\brave.exe"]
    };

    const paths = browserDefaultPathMap[browser.toLowerCase()] || [];

    for (const path of paths) {
        if (fs.existsSync(path)) {
            return path;
        }
    }

    return null;
}

async function cleanUp(tempDirPath) {
    if (browserProcess) {
        browserProcess.kill();
    }
    server.close();
    await removeTempDir(tempDirPath);
    process.exit(0);
}

process.on('SIGINT', async () => {
    try {
      await cleanUp(tempDirPath);
    } catch (error) {
      console.error('Error during cleanup:', error);
      process.exit(1);
    }
  });


async function removeTempDir(tempDirPath) {
        // Safe mechanism so that the path has to end with /web-forge/bin/temp_(random uuid) 
    const pattern = new RegExp(/\\web-forge\\bin\\temp_[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/i);
    
    if (pattern.test(tempDirPath) && fs.existsSync(tempDirPath)) {
        // Have to have because the browser might be using userfolder for couple seconds still after shutting down which would cause permission issues.
        let attempts = 0;
        while (attempts < 10) {
            try {
                fs.rmSync(tempDirPath, { recursive: true });
                break;
            } catch (deleteError) {
                console.error(`Error deleting ${tempDirPath}: ${deleteError}`);
            }
            attempts++;
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    } else {
        console.log('Invalid temp extension folder path or folder does not exist.', tempDirPath);
    }
}

function validateBrowser(browser) {
    const browserMappings = [
        ['chrome', 'ch'],
        ['edge', 'msedge'],
        ['brave', 'br']
    ];

    for (const mapping of browserMappings) {
        if (mapping.includes(browser)) {
            return mapping[0];
        }
    }

    return false;
}


const [, , method, browser , path, ...optionalArgs] = process.argv;

if (method !== undefined) {
    switch (method) {
        case "-b":
            // In the workings
            break;

        case "-r":
            if (validateBrowser(browser) !== false) {
                Webforge(browser, path, optionalArgs);
            } else {
                console.error(`Unknown browser: ${browser}`);
                process.exit(1);
            }
            break;

        default:
            console.error(`Unknown method: ${method}`);
            break;
    }
} else {
    console.log('Usage: web-forge <-b|-r> <path> <optional arguments>');
}